// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'SplitData.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2378516257056583631),
      name: 'WorkoutSplit',
      lastPropertyId: const IdUid(5, 6804907203780314643),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5529114887189541268),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4232220036963303355),
            name: 'splitName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5093793955043558336),
            name: 'workouts',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8262004946239950482),
            name: 'isSelected',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6804907203780314643),
            name: 'currentWorkoutIndex',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 7518295442284721532),
      name: 'SelectedSplit',
      lastPropertyId: const IdUid(2, 3284126298718300637),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2952019013800244061),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3284126298718300637),
            name: 'selectedSplitId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 7518295442284721532),
      lastIndexId: const IdUid(1, 2415444167078954909),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [2415444167078954909],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    WorkoutSplit: EntityDefinition<WorkoutSplit>(
        model: _entities[0],
        toOneRelations: (WorkoutSplit object) => [],
        toManyRelations: (WorkoutSplit object) => {},
        getId: (WorkoutSplit object) => object.id,
        setId: (WorkoutSplit object, int id) {
          object.id = id;
        },
        objectToFB: (WorkoutSplit object, fb.Builder fbb) {
          final splitNameOffset = fbb.writeString(object.splitName);
          final workoutsOffset = fbb.writeList(
              object.workouts.map(fbb.writeString).toList(growable: false));
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, splitNameOffset);
          fbb.addOffset(2, workoutsOffset);
          fbb.addBool(3, object.isSelected);
          fbb.addInt64(4, object.currentWorkoutIndex);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = WorkoutSplit(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              splitName: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              isSelected: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              currentWorkoutIndex:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              workouts: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []));

          return object;
        }),
    SelectedSplit: EntityDefinition<SelectedSplit>(
        model: _entities[1],
        toOneRelations: (SelectedSplit object) => [],
        toManyRelations: (SelectedSplit object) => {},
        getId: (SelectedSplit object) => object.id,
        setId: (SelectedSplit object, int id) {
          object.id = id;
        },
        objectToFB: (SelectedSplit object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.selectedSplitId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SelectedSplit(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              selectedSplitId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [WorkoutSplit] entity fields to define ObjectBox queries.
class WorkoutSplit_ {
  /// see [WorkoutSplit.id]
  static final id =
      QueryIntegerProperty<WorkoutSplit>(_entities[0].properties[0]);

  /// see [WorkoutSplit.splitName]
  static final splitName =
      QueryStringProperty<WorkoutSplit>(_entities[0].properties[1]);

  /// see [WorkoutSplit.workouts]
  static final workouts =
      QueryStringVectorProperty<WorkoutSplit>(_entities[0].properties[2]);

  /// see [WorkoutSplit.isSelected]
  static final isSelected =
      QueryBooleanProperty<WorkoutSplit>(_entities[0].properties[3]);

  /// see [WorkoutSplit.currentWorkoutIndex]
  static final currentWorkoutIndex =
      QueryIntegerProperty<WorkoutSplit>(_entities[0].properties[4]);
}

/// [SelectedSplit] entity fields to define ObjectBox queries.
class SelectedSplit_ {
  /// see [SelectedSplit.id]
  static final id =
      QueryIntegerProperty<SelectedSplit>(_entities[1].properties[0]);

  /// see [SelectedSplit.selectedSplitId]
  static final selectedSplitId =
      QueryIntegerProperty<SelectedSplit>(_entities[1].properties[1]);
}
